Key Takeaways for a Maven User:
build.gradle is your new pom.xml, but it's code (Groovy/Kotlin).
The Gradle Wrapper (gradlew) is your new mvnw. Use it.
Tasks are the fundamental unit of execution, replacing Maven's lifecycle phases. Plugins provide common tasks.
Dependency configurations (implementation, api) replace Maven scopes. implementation is your new default.
plugins { ... } is how you add capabilities.
Performance features (caching, incremental builds) are significant advantages.


Common Gradle Commands to Try:
(Run these from the my-gradle-java-project directory)
./gradlew tasks: See all available tasks.
# On Linux/macOS
./gradlew tasks
# On Windows
.\gradlew.bat tasks
Use code with caution.
Bash
(For brevity, I'll use ./gradlew from now on)
./gradlew clean: Deletes the build directory.
./gradlew build: Compiles, tests, and assembles the project (e.g., creates a JAR). This usually runs check (which runs test) and assemble.
You'll find outputs in build/ (e.g., build/libs/my-gradle-java-project-0.1.0.jar, build/classes/, build/reports/tests/test/index.html).
./gradlew test: Compiles and runs tests.
./gradlew run: Runs the application (because we used the application plugin and defined mainClass).
./gradlew greet: Runs our custom task.
./gradlew dependencies: Shows the project's dependency tree. Very useful for debugging dependency issues.




Plugins
Plugins extend Gradle's capabilities. They can:
Add pre-configured tasks.
Define conventions (e.g., default source directories for Java).
Configure dependency scopes (configurations).
Integrate with other tools.


Tasks
Everything in Gradle is a task. A task is a single unit of work (e.g., compile code, run tests, create a JAR, deploy an artifact).
Plugins contribute pre-defined tasks (e.g., the java plugin adds compileJava, processResources, classes, jar, test, build, etc.).
You can easily define your own custom tasks.
Tasks can depend on other tasks, forming a Directed Acyclic Graph (DAG). Gradle figures out the execution order.
Common commands to interact with tasks:
./gradlew tasks: Lists available tasks.
./gradlew <taskName>: Executes a specific task (and its dependencies).
./gradlew clean build: Executes clean then build.
Example Custom Task (Groovy):
tasks.register('Welcome_To_PVS') { // Define a new task named 'Welcome_To_PVS'
    doLast { // Action to perform when the task runs
        println 'Hello PVS developer!'
    }
}
You'd run this with ./gradlew Welcome_To_PVS.



settings.gradle.kts:
Purpose:
settings.gradle.kts: Defines which projects are in the build and high-level plugin management.
build.gradle.kts: Defines how a specific project is built (dependencies, tasks, plugins applied to that project).
Execution Order: settings.gradle.kts is always executed before any build.gradle.kts.


ore Purposes of settings.gradle.kts:
Defining the Project Hierarchy (for Multi-Project Builds):
This is its most common and primary function. It tells Gradle which subprojects are part of the build.
Maven Analogy: Similar to the <modules> section in a parent pom.xml.
Setting the Root Project Name:
Defines the name for the root project of the build.
Centralized Plugin Management (Modern Gradle Feature):
Allows you to declare plugin versions and repositories in one central place, ensuring consistency across all subprojects.
Maven Analogy: Somewhat similar to the <pluginManagement> section in a parent pom.xml for managing plugin versions.
Configuring Plugin Repositories:
Specifies where Gradle should look for plugins (distinct from where it looks for project dependencies).
Other Advanced Settings:
Including other builds (composite builds).
Configuring build-wide settings like the build cache (though often gradle.properties is used for this too).


Even here, pluginManagement is good practice. If you omit settings.gradle.kts entirely in a single-project scenario, Gradle uses default settings (root project name is the directory name).


